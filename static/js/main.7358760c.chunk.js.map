{"version":3,"sources":["actions/index.js","Timer.js","reducers/timersReducer.js","reducers/selectedTimeReducer.js","reducers/index.js","components/NewTimer.js","utils/index.js","components/Drawing.js","components/TimerView.js","components/ListTimers.js","App.js","reportWebVitals.js","index.js"],"names":["NEW_TIMER","TOGGLE_TIMER","SELECT_TIMER","UPDATE","DELETE_TIMER","Timer","name","this","time","isRuninng","timersReducer","state","action","type","payload","length","filter","timer","i","index","newState","map","isRunning","deltaTime","selectedTimerReducer","combineReducers","timers","timerReducer","selectedTimer","selectedTimeReducer","NewTimer","useState","setName","dispatch","useDispatch","className","placeholder","value","onChange","e","target","onClick","addTimer","TIMERS_STATE","formatTime","ms","Math","round","secs","floor","mins","hrs","Drawing","props","height","min","class","style","width","id","fill","stroke","stroke-width","stroke-miterlimit","d","TimerView","toggleTimer","deleteTimer","ListTimers","useSelector","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducers","subscribe","throttle","stringify","setItem","console","log","saveState","getState","lastUpdateTime","Date","now","setInterval","update","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7358760c.chunk.js","sourcesContent":["export const NEW_TIMER = 'NEW_TIMER'\nexport const TOGGLE_TIMER = 'TOGGLE_TIMER'\nexport const SELECT_TIMER = 'SELECT_TIMER'\nexport const UPDATE  = \"UPDATE\"\nexport const DELETE_TIMER = \"DELETE_TIMER\"\n\nexport const addTimer = (name) => {\n  return {\n    type: NEW_TIMER, \n    payload: { name }\n  }\n}\n\nexport const deleteTimer = (index) => {\n  return {\n    type: DELETE_TIMER, \n    payload: { index }\n  }\n}\n\nexport const toggleTimer = (index) => {\n  return {\n    type: TOGGLE_TIMER, \n    payload: { index }\n  }\n}\n\nexport const selectTimer = (index) => {\n  return {\n    type: SELECT_TIMER, \n    payload: { index }\n  }\n}\n\nexport const update = (deltaTime) => {\n  return {\n    type: UPDATE,\n    payload: { deltaTime }\n  }\n}","class Timer {\n  constructor(name) {\n    this.name = name;\n    this.time = 0;\n    this.isRuninng = false\n  }\n}\n\nexport default Timer;","// Import all of our actions\nimport { NEW_TIMER, TOGGLE_TIMER, UPDATE, DELETE_TIMER } from '../actions';\nimport Timer from '../Timer'\n\nconst timersReducer = (state = [], action) => {\n  switch (action.type) {\n    case NEW_TIMER:\n      // Add a new timer, return a copy of state\n      const name = action.payload.name ? action.payload.name : `Timer ${state.length}`\n      return [...state, new Timer(name)]\n\n    case DELETE_TIMER:\n      return state.filter((timer, i) => {\n        return i !== action.payload.index\n      })\n\n    case TOGGLE_TIMER:\n      // Invert the isRunning property of timer at index, return a copy of state\n      const newState = state.map((timer, index) => {\n        if (action.payload.index === index) {\n          return {...timer, isRunning: !timer.isRunning}\n        }\n        return timer\n      })\n      return newState\n    \n    case UPDATE:\n      return state.map((timer) => {\n        if (timer.isRunning) {\n          timer = { ...timer, time: timer.time += action.payload.deltaTime }\n        }\n        return timer\n      })\n\n    default:\n      return state;\n  }\n}\n\nexport default timersReducer;","import { SELECT_TIMER } from '../actions'\n\nconst selectedTimerReducer = (state = null, action) => {\n  switch (action.type) {\n    case SELECT_TIMER:\n      return state = action.payload.index;\n\n    default: \n    return state;\n  }\n}\n\nexport default selectedTimerReducer;","import { combineReducers } from 'redux';\n\nimport timerReducer from './timersReducer';\nimport selectedTimeReducer from './selectedTimeReducer';\n\nexport default combineReducers({\n  timers: timerReducer,              // array\n  selectedTimer: selectedTimeReducer, // int/number\n});","// used to create a value that will be available across multiple renders of this component\nimport React, { useState } from 'react'\n// access to the Redux store to allow component to send actions when updating store\nimport { useDispatch } from 'react-redux'\nimport { addTimer } from '../actions'\nimport './NewTimer.css'\n\nexport default function NewTimer() {\n  const [ name, setName ] = useState('')\n  const dispatch = useDispatch()\n  return (\n    <div className=\"NewTimer\">\n      <input\n        type='text'\n        placeholder='new timer name'\n        name='name'\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        />\n      <button\n        onClick={() => dispatch(addTimer(name))}\n      >save</button>\n    </div>\n  )\n}","const TIMERS_STATE = \"TIMERS_STATE\"\n\n// Load State\nexport const loadState = () => {\n  try {\n  // Grab the state from local storage\n    const serializedState = localStorage.getItem(TIMERS_STATE)\n    if (serializedState === null) {\n      return undefined\n    }\n    // convert the string into JSON for the Redux store\n    return JSON.parse(serializedState)\n  } catch(err) {\n    return undefined\n  }\n}\n\n// Save State\nexport const saveState = (state) => {\n  try {\n    // convert the state from JSON, into a string\n    const serializedState = JSON.stringify(state)\n    // save the state to local storage\n    localStorage.setItem(TIMERS_STATE, serializedState)\n  } catch(err) {\n    console.log(\"Error saving data\")\n  }\n}\n\nexport const formatTime = (time) => {\n  const ms = Math.round(time / 100) % 10\n  const secs = Math.floor(time / 1000) % 60\n  const mins = Math.floor(time / 1000 / 60) % 60\n  const hrs = Math.floor(time / 1000 / 1000 / 60) % 60\n  return `${hrs}:${mins}:${secs}.${ms}`\n}","import './Drawing.css'\n\nfunction Drawing(props){\n  const {time} = props\n  const height = Math.min(time / 1000 / 15 / 60 * 100, 100) \n  return (\n      <div className=\"alltimeShapes\">\n        <div className=\"Drawing\">\n          <div class=\"drawing\">\n            <div style={{height: `${height}%`}}></div> \n          </div>\n          <svg width=\"100px\" height=\"100px\">\n            <defs>\n              <clipPath id=\"svgPath\">\n                <path fill=\"#FFFFFF\" stroke=\"#000000\" stroke-width=\"1.5794\" stroke-miterlimit=\"10\"\n                  d=\"M75,2.34839599 C83.3772809,7.16830411 86.2611014,17.8667396 81.4411932,26.2440206 C81.4324704,26.2591814 81.4237248,26.2743292 81.4149565,26.2894638 L80.423,27.9990125 L82.5,28 C92.1649831,28 100,35.8350169 100,45.5 C100,55.1649831 92.1649831,63 82.5,63 L80.423,62.9990125 L81.4149565,64.7105362 C86.2599622,73.0733269 83.408234,83.7803615 75.0454433,88.6253673 L75,88.651604 L75,88.651604 C66.5901928,93.4902263 55.8508543,90.6126442 50.9870369,82.2173833 L49.999,80.5130125 L49.0129631,82.2173833 C44.1491457,90.6126442 33.4098072,93.4902263 25,88.651604 C16.6227191,83.8316959 13.7388986,73.1332604 18.5588068,64.7559794 C18.5675296,64.7408186 18.5762752,64.7256708 18.5850435,64.7105362 L19.576,62.9990125 L17.5,63 C7.83501688,63 1.18361906e-15,55.1649831 0,45.5 C-1.18361906e-15,35.8350169 7.83501688,28 17.5,28 L19.576,27.9990125 L18.5850435,26.2894638 C13.7400378,17.9266731 16.591766,7.21963848 24.9545567,2.37463275 L25,2.34839599 L25,2.34839599 C33.4098072,-2.4902263 44.1491457,0.387355835 49.0129631,8.78261666 L49.999,10.4870125 L50.9870369,8.78261666 C55.8508543,0.387355835 66.5901928,-2.4902263 75,2.34839599 Z\"\n                  id=\"Combined-Shape\"></path>\n              </clipPath>\n            </defs>\n          </svg>\n        </div>\n      </div>\n  )\n}\n\nexport default Drawing;","import React, { } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { deleteTimer, toggleTimer } from '../actions'\nimport { formatTime } from '../utils';\nimport './TimerView.css'\nimport Drawing from './Drawing';\n\n\nexport default function TimerView(props) {\n  const { index, timer } = props\n  const dispatch = useDispatch()\n  return (\n      <div className=\"allViews\">\n          <div className=\"TimerView\">\n          <h2>{timer.name}</h2>\n          <h1>{formatTime(timer.time)}</h1>\n          <div className=\"buttons\">\n            <button\n              onClick={() => dispatch(toggleTimer(index))}\n            >\n              {timer.isRunning ? \"stop\" : \"start\"}\n            </button>\n            <button\n              onClick={() => dispatch(deleteTimer(index))}\n            >\n              delete\n            </button>\n          </div>\n          <Drawing index={index} time={timer.time}/>\n        </div>\n      </div>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport TimerView from './TimerView'\n\nexport default function ListTimers() {\n  const timers = useSelector(state => state.timers)\n\n  return (\n    <div>\n      {timers.map((timer, i) => {\n        return (\n          <TimerView\n            key={`timer-${i}`}\n            timer={timer}\n            index={i}\n          />\n        )\n      })}\n    </div>\n  )\n}","import './App.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\nimport NewTimer from './components/NewTimer'\nimport ListTimers from './components/ListTimers'\nimport { update } from './actions'\nimport { loadState, saveState } from './utils'\nimport throttle from 'lodash/throttle'\n\nconst persistedState = loadState()\nconst store = createStore(reducers, persistedState)\nstore.subscribe(throttle(() => {\n  saveState(store.getState())\n}, 1000));\n\n// const store = createStore(reducers);\n\nlet lastUpdateTime = Date.now()\nsetInterval(() => {\n  const now = Date.now()\n  const deltaTime = now - lastUpdateTime\n  lastUpdateTime = now\n  store.dispatch(update(deltaTime))\n}, 50)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n      <h1 className=\"title\">timers</h1>\n          <NewTimer />\n        <div className=\"allTimers\">\n          <ListTimers />\n        </div> \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}